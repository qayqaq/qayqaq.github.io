<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Win10+Ubuntu20.04双系统搭建过程</title>
      <link href="/2020/07/24/win10-ubuntu20-04-shuang-xi-tong-da-jian-guo-cheng/"/>
      <url>/2020/07/24/win10-ubuntu20-04-shuang-xi-tong-da-jian-guo-cheng/</url>
      
        <content type="html"><![CDATA[<p>鬼知道我这两天重启了多少次电脑，那个小洞都快被我插烂了。。。</p><hr><p>因为有需求要用Ubuntu系统，之前用虚拟机实在是太卡了，索性下定决心装上双系统，总共用了将近2天时间才搞定，下面记录一下装机过程。（要是放图就太多了，不放了，步骤很详细）</p><hr><h2 id="提前准备的东西："><a href="#提前准备的东西：" class="headerlink" title="提前准备的东西："></a>提前准备的东西：</h2><ol><li>注意在装双系统之前要有一个空的盘和一和空的U盘，装机的过程会使之格式化，所以有重要文件一定要备份好。</li><li>下载一个U盘引导盘制作工具 rufus 软件。</li><li>下载好想下载的系统安装包，可以去官网下载或者找阿里云也可，我下的是最新版的 ubuntu20.04，是iso镜像文件。</li></ol><hr><h2 id="一-修改BIOS"><a href="#一-修改BIOS" class="headerlink" title="一. 修改BIOS"></a>一. 修改BIOS</h2><p>首先要进入 BIOS，不同电脑进入的方式可能会不一样，开机时按 <code>F12</code> 或 <code>F2</code> 可能会进入，但是我试了很多按法都没进去，索性直接在关机时用针插入电脑侧边的小洞（有恢复图标），最好找长一点的，太短了会没有反应。打开 BIOS 之后要做的是允许引导写入，做法是进入 BIOS，然后进入 Security，将 Secure Boot 从 Enable 改称 Disable。最后按 <code>F10</code>，保存自动重启电脑。</p><h2 id="二-制作引导盘"><a href="#二-制作引导盘" class="headerlink" title="二. 制作引导盘"></a>二. 制作引导盘</h2><p>插上空的U盘，打开 rufus 软件，在设备处选择自己插的U盘，在引导类型选择处选择系统安装包，目标系统类型 BIOS 或 UEFI，然后就可以开始了，然后点击OK之后，引导盘就制做好了。</p><h2 id="三-利用引导盘装系统"><a href="#三-利用引导盘装系统" class="headerlink" title="三. 利用引导盘装系统"></a>三. 利用引导盘装系统</h2><p>在关机的情况下插上U盘，同样插那个小孔，这次选择启动菜单 boot menu，选择用U盘来启动，进入 Ubuntu 。然后就按引导的步骤来，选中文，地区正常安装等等，注意在选择安装类型的时候选其他选项。这样我们就会自己来进行分区了。我们能看到空闲是非常小的。如果能到达这一步了，说明没什么问题，这个时候重启电脑，进入 Win10，终于要把 ubuntu 装进电脑了，我这里是装进了空的E盘。</p><p>进入 Win10 之后，右击此电脑，选择管理，进入磁盘管理，能看到电脑有几个盘有哪些空间，右击想装的盘，我这里是E盘，删除磁盘，删除之后就会显示有好大的空间没有分配了。而这些空间就是我们要重新分配的。</p><p>重启进入 ubuntu，回到 ubuntu 分区那一步骤，我们能看到空闲空间变得很大。我们就要分配这些空间，每次分区都先点击空闲，再点击加号。由于只讲步骤，这里先不谈 linux 的分区，下面几个分区一定不要弄错。</p><ol><li>建立 swap 交换空间，取8G，设置为主分区和空间起始位置；</li><li>建立 EFI 系统分区，取300M，设置为逻辑分区和空间起始位置；</li><li>建立 /home 分区，取150G，设置为逻辑分区和空间起始位置；</li><li>建立 /usr 分区，取100G，设置为逻辑分区和空间起始位置；</li><li>建立 / 分区，取剩下所有，设置为逻辑分区和空间起始位置。</li></ol><p>安装启动引导器的设备选 /dev/sda4，接下来就可以继续安装，按提示重启电脑了。如果设备理想兼容的话，再次重启就能进入系统选择了。然而我遇到了ubuntu系统卡紫屏的问题。。。</p><h2 id="四-修改内核参数解决卡紫屏"><a href="#四-修改内核参数解决卡紫屏" class="headerlink" title="四. 修改内核参数解决卡紫屏"></a>四. 修改内核参数解决卡紫屏</h2><p>查资料是显卡驱动的问题，之前用的 NVIDIA 显卡驱动，和新系统不适配。</p><p>紫屏时只能按电源关机，再重启进入引导页面时，按 <code>e</code> 键进入 <code>grub</code> 页面，在其中找到开头是linux的一行，再最后加上 <code>nomodeset</code> 这样能暂时禁用所有显卡驱动，<code>F10</code> 保存退出，就能正常打开ubuntu系统了，别忘了系统要更新，输入以下命令即可：</p><pre><code> $ sudo apt update &amp;&amp; sudo apt upgrade -y</code></pre><p>更新之后最好再重启一下电脑，这时还得加上 <code>nomodeset</code> 才能打开，打开后搜索 <code>drivers</code> 就能看到额外驱动标签页，打开之后就能看到有很多可选择的驱动，而默认的并不是 NVIDIA，所以我们改称 NVIDIA，这样就不用每次开机都要修改内核参数了。</p><h2 id="五-两个小问题"><a href="#五-两个小问题" class="headerlink" title="五. 两个小问题"></a>五. 两个小问题</h2><ol><li><p>刚装完之后会遇到每次开机直接进入windows的情况</p><p> 查资料得知，因为 Windows 现在是快速启动， Windows8以上的系统关机实际上不是以前的关机，而是休眠，因此下次开机实际上是从休眠中恢复，因此是直接进入 Windows 。因此把快速启动关掉就可以了。</p></li><li><p>打开 ubuntu 再进入 Win10，总会比正常时间差 8 个小时</p><p> 查资料得知，Windows 和 Ubuntu 的时间设置方式是不一样的，造成了这种错误。在 Ubuntu 中把计算机硬件时间改成系统显示的时间，即禁用Ubuntu的UTC：</p><pre><code> timedatectl set-local-rtc 1 --adjust-system-clock</code></pre><p> 然后再重启电脑进入 Windows 修改时间即可。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 双系统，Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/23/hello-world/"/>
      <url>/2020/07/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
